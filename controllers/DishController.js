const { Dish } = require("../models/dish");

class DishController {
  // ‚úÖ –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏
  async addDish(req, res) {
    const { shop, title, description } = req.body;

    if (!shop || !title || !description) {
      res.status(400);
      throw new Error("Controller: Please provide all fields");
    }

    // –¥—ñ—Å—Ç–∞—î–º–æ id —ñ–∑ –æ–±'—î–∫—Ç–∞ –∑–∞–ø–∏—Ç—É —ñ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –≤ owner
    const { _id: owner } = req.user;

    const result = await Dish.create({
      ...req.body,
      owner,
    });

    // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –¥–æ–¥–∞–≤—Å—è –¥–æ–∫—É–º–µ–Ω—Ç —É –±–∞–∑—É –¥–∞–Ω–∏—Ö
    if (!result) {
      res.status(500);
      throw new Error("Server Error");
    }
    res.status(201).json({
      code: 201,
      message: "success",
      data: result,
    });
  }

  // ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è hotkey
  async removeDish(req, res) {
    const { id: dishId } = req.params;
    const { _id: userId } = req.user;

    if (!dishId) {
      res.status(400);
      throw new Error("Controller: hotkeyId is required");
    }

    // –∑–Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ id —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –Ω–∞–ª–µ–∂–∏—Ç—å –≤—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    const result = await Dish.findOneAndDelete({
      _id: dishId,
      owner: userId,
    });

    // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∏–¥–∞–ª–∏–≤—Å—è –¥–æ–∫—É–º–µ–Ω—Ç —ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    if (!result) {
      res.status(400);
      throw new Error("Controller: Category not found");
    }

    res.status(200).json({
      status: "success",
      code: 200,
      message: "Dish deleted",
      data: result,
    });
  }

  // üü® –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏
  async updateDish(req, res) {
    const { id: dishId } = req.params;
    const { _id: userId } = req.user;

    if (!dishId) {
      res.status(400);
      throw new Error("Controller: dishId is required");
    }

    // —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –æ–¥–Ω–µ —ñ–∑ –ø–æ–ª—ñ–≤ —Ç–æ –∑–Ω–∞–π—Ç–∏ –≤ –±–∞–∑—ñ —ñ –æ–±–Ω–æ–≤–∏—Ç–∏
    const changedFields = { ...req.body };
    // console.log(changedFields);

    if (!changedFields) {
      res.status(400);
      throw new Error("Controller: Please provide fields for update");
    }

    const result = await Dish.findOneAndUpdate(
      {
        _id: dishId,
        owner: userId,
      },
      changedFields,
      {
        new: true,
      }
    );

    // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –æ–Ω–æ–≤–∏–≤—Å—è –¥–æ–∫—É–º–µ–Ω—Ç —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    if (!result) {
      res.status(500);
      throw new Error("Server Error");
    }
    res.status(200).json({
      code: 200,
      message: "success",
      data: result,
    });
  }

  // ‚èπÔ∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å—Ç—Ä–∞–≤–∏ by user
  async getAllDishes(req, res) {
    const { _id: userId } = req.user;
    const result = await Dish.find({ owner: userId });

    if (!result) {
      res.status(400);
      throw new Error("Controller: Dish not found");
    }

    res.json({
      status: "success",
      code: 200,
      message: "Own Dishes",
      data: result,
      quantity: result.length,
    });
  }

  // ‚ùå –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å—Ç—Ä–∞–≤–∏ –¥–∞–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É
  async removeAllbyShop(req, res) {
    const { id: shopId } = req.params;
    const { _id: userId } = req.user;

    if (!shopId) {
      res.status(400);
      throw new Error("Controller: shopId is required");
    }
    // –∑–Ω–∞–π—Ç–∏ —Å—Ç—Ä–∞–≤—É –ø–æ id –º–∞–≥–∞–∑–∏–Ω—É —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–æ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    const result = await Dish.deleteMany({
      category: shopId,
      owner: userId,
    });

    if (!result) {
      res.status(400);
      throw new Error("Controller: Dish not found");
    }
    res.status(200).json({
      status: "success",
      code: 200,
      message: "Dish deleted",
      data: result,
    });
  }
}

const dishCtrl = new DishController();
module.exports = dishCtrl;
